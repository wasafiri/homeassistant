esphome:
  name: tft-weather
  friendly_name: Weather TFT Display

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Time sync from Home Assistant
time:
  - platform: homeassistant
    id: esptime
    timezone: America/New_York

logger:
  level: INFO

api:
  encryption:
    key: !secret ha_api

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "garagetext"
    password: !secret fallback_password

captive_portal:

# SPI setup for TFT display
spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

touchscreen:
  - platform: xpt2046
    id: xpt2046_touchscreen
    cs_pin: 17
    interrupt_pin: 16
    display: tft_display
    calibration:
      x_min: 280
      x_max: 3860
      y_min: 340
      y_max: 3860

# Define colors for display
color:
  - id: retro_red
    hex: FF1744
  - id: retro_orange
    hex: FF9100
  - id: retro_yellow
    hex: FFD600
  - id: retro_green
    hex: 00E676
  - id: retro_blue
    hex: 00B0FF
  - id: retro_cyan
    hex: 00FFFF
  - id: retro_teal
    hex: 00BFA5

# Define fonts
font:
  - file: "Roboto-Regular.ttf"
    id: roboto_small
    size: 17
  - file: "Roboto-Regular.ttf"
    id: roboto_medium
    size: 32
  - file: "Roboto-Regular.ttf"
    id: roboto_large
    size: 36

# Display: 6 boxes arranged as 2 rows of 3
display:
  - platform: ili9xxx
    model: ILI9341
    cs_pin: 26
    dc_pin: GPIO5
    reset_pin: 22
    rotation: 90
    id: tft_display
    invert_colors: false
    lambda: |-
      // Helper: Draw a rectangle border by plotting individual pixels.
      auto draw_rect = [&] (int x, int y, int w, int h, Color c) {
        // Top and bottom horizontal lines.
        for (int i = 0; i < w; i++) {
          it.draw_pixel_at(x + i, y, c);
          it.draw_pixel_at(x + i, y + h - 1, c);
        }
        // Left and right vertical lines.
        for (int j = 0; j < h; j++) {
          it.draw_pixel_at(x, y + j, c);
          it.draw_pixel_at(x + w - 1, y + j, c);
        }
      };

      // Grid dimensions for a 320x240 display:
      const int square_w1 = 106;
      const int square_w2 = 106;
      const int square_w3 = 108;  // 106 + 106 + 108 = 320
      const int square_h  = 120;   // 120 + 120 = 240
      const int margin    = 5;

      // Draw borders for each square.
      // Top row:
      draw_rect(0, 0, square_w1, square_h, id(retro_blue));
      draw_rect(square_w1, 0, square_w2, square_h, id(retro_blue));
      draw_rect(square_w1 * 2, 0, square_w3, square_h, id(retro_blue));
      // Bottom row:
      draw_rect(0, square_h, square_w1, square_h, id(retro_blue));
      draw_rect(square_w1, square_h, square_w2, square_h, id(retro_blue));
      draw_rect(square_w1 * 2, square_h, square_w3, square_h, id(retro_blue));

      // --- TOP ROW ---
      // Square 1: TODAY
      int base_x = margin;
      int base_y = margin;
      it.print(base_x, base_y, id(roboto_small), id(retro_blue), "TODAY");
      it.printf(base_x, base_y + 20, id(roboto_medium), id(retro_red), "%.0f°", id(today_high).state);
      it.printf(base_x, base_y + 45, id(roboto_medium), id(retro_blue), "%.0f°", id(tonight_low).state);
      it.printf(base_x, base_y + 83, id(roboto_small), id(retro_yellow), "%.2f/%.2f\"",
                id(rain_today).state, id(rain_forecast).state);

      // Square 2: TMW
      base_x = square_w1 + margin;
      base_y = margin;
      it.print(base_x, base_y, id(roboto_small), id(retro_blue), "TMW");
      it.printf(base_x, base_y + 20, id(roboto_medium), id(retro_red), "%.0f°", id(tomorrow_high).state);
      it.printf(base_x, base_y + 45, id(roboto_medium), id(retro_blue), "%.0f°", id(tomorrow_low).state);
      it.printf(base_x, base_y + 83, id(roboto_small), id(retro_yellow), "%.2f\"", id(future_rain_1).state);

      // Square 3: Forecast Day (2 days from now)
      base_x = square_w1 * 2 + margin;
      base_y = margin;
      {
        time_t future_time = id(esptime).now().timestamp + 2 * 86400;
        struct tm *timeinfo = localtime(&future_time);
        char day_buffer[8];
        strftime(day_buffer, sizeof(day_buffer), "%a", timeinfo);
        it.print(base_x, base_y, id(roboto_small), id(retro_blue), day_buffer);
      }
      it.printf(base_x, base_y + 20, id(roboto_medium), id(retro_red), "%.0f°", id(forecast2max).state);
      it.printf(base_x, base_y + 45, id(roboto_medium), id(retro_blue), "%.0f°", id(forecast2min).state);
      it.printf(base_x, base_y + 83, id(roboto_small), id(retro_yellow), "%.2f\"", id(forecast2rain).state);

      // --- BOTTOM ROW ---
      // Square 4: LAST 4 (Past 4 Days Values)
      base_x = margin;
      base_y = square_h + margin;
      it.print(base_x, base_y, id(roboto_small), id(retro_blue), "LAST 4 DAY");
      int bot_line_y = base_y + 20;
      // Line 1 (Yesterday)
      it.printf(base_x, bot_line_y, id(roboto_small), id(retro_yellow), "%.2f\"", id(rain_yesterday).state);
      it.print(base_x + 40, bot_line_y, id(roboto_small), id(retro_blue), "/");
      it.printf(base_x + 45, bot_line_y, id(roboto_small), Color::WHITE, "%.2f\"", id(yesterday_snow).state);
      // Line 2 (2 Days Ago)
      bot_line_y += 20;
      it.printf(base_x, bot_line_y, id(roboto_small), id(retro_yellow), "%.2f\"", id(rain_2_days_ago).state);
      it.print(base_x + 40, bot_line_y, id(roboto_small), id(retro_blue), "/");
      it.printf(base_x + 45, bot_line_y, id(roboto_small), Color::WHITE, "%.2f\"", id(two_days_ago_snow).state);
      // Line 3 (3 Days Ago)
      bot_line_y += 20;
      it.printf(base_x, bot_line_y, id(roboto_small), id(retro_yellow), "%.2f\"", id(rain_3_days_ago).state);
      it.print(base_x + 40, bot_line_y, id(roboto_small), id(retro_blue), "/");
      it.printf(base_x + 45, bot_line_y, id(roboto_small), Color::WHITE, "%.2f\"", id(three_days_ago_snow).state);
      // Line 4 (4 Days Ago)
      bot_line_y += 20;
      it.printf(base_x, bot_line_y, id(roboto_small), id(retro_yellow), "%.2f\"", id(day4_rain).state);
      it.print(base_x + 40, bot_line_y, id(roboto_small), id(retro_blue), "/");
      it.printf(base_x + 45, bot_line_y, id(roboto_small), Color::WHITE, "%.2f\"", id(day4_snow).state);

      // Square 5: 4 DAY Totals
      base_x = square_w1 + margin;
      base_y = square_h + margin;
      float total_rain = id(rain_today).state + id(rain_yesterday).state + id(rain_2_days_ago).state +
                         id(rain_3_days_ago).state + id(day4_rain).state;
      float total_snow = id(day0_snow).state + id(yesterday_snow).state + id(two_days_ago_snow).state +
                         id(three_days_ago_snow).state + id(day4_snow).state;
      it.print(base_x, base_y, id(roboto_small), id(retro_blue), "SUM LAST 4");
      base_y += 20;
      it.printf(base_x, base_y, id(roboto_small), id(retro_yellow), "Rain %.2f\"", total_rain);
      base_y += 20;
      it.printf(base_x, base_y, id(roboto_small), Color::WHITE, "Snow %.2f\"", total_snow);

      // Square 6: CHANCE (Chance of rain in next hour)
      base_x = square_w1 * 2 + margin;
      base_y = square_h + margin;
      it.print(base_x, base_y, id(roboto_small), id(retro_blue), "RAIN NOW");

      // Format the chance sensor value into a string.
      char chance_buffer[16];
      sprintf(chance_buffer, "%.0f%%", id(chance_rain_1hr).state * 100);

      // Approximate text width based on character count (adjust multiplier as needed)
      int text_width = strlen(chance_buffer) * 20;  // e.g., 20 pixels per character
      int center_x = base_x + (square_w3 - text_width) / 2;

      it.print(center_x, base_y + 30, id(roboto_large), id(retro_yellow), chance_buffer);

# Sensors from Home Assistant
sensor:
  - platform: homeassistant
    id: today_high
    entity_id: sensor.owmh_home_forecast0max

  - platform: homeassistant
    id: tonight_low
    entity_id: sensor.owmh_home_forecast0min

  - platform: homeassistant
    id: tomorrow_high
    entity_id: sensor.owmh_home_forecast1max

  - platform: homeassistant
    id: tomorrow_low
    entity_id: sensor.owmh_home_forecast1min

  - platform: homeassistant
    id: rain_today
    entity_id: sensor.owmh_home_day0rain

  - platform: homeassistant
    id: rain_forecast
    entity_id: sensor.owmh_home_forecast0rain

  - platform: homeassistant
    id: rain_yesterday
    entity_id: sensor.owmh_home_day1rain

  - platform: homeassistant
    id: rain_2_days_ago
    entity_id: sensor.owmh_home_day2rain

  - platform: homeassistant
    id: rain_3_days_ago
    entity_id: sensor.owmh_home_day3rain

  - platform: homeassistant
    id: day4_rain
    entity_id: sensor.owmh_home_day4rain

  - platform: homeassistant
    id: future_rain_1
    entity_id: sensor.owmh_home_forecast1rain

  - platform: homeassistant
    id: forecast2max
    entity_id: sensor.owmh_home_forecast2max

  - platform: homeassistant
    id: forecast2min
    entity_id: sensor.owmh_home_forecast2min

  - platform: homeassistant
    id: forecast2rain
    entity_id: sensor.owmh_home_forecast2rain

  # For the LAST 4 box (rain/snow for previous days)
  - platform: homeassistant
    id: yesterday_snow
    entity_id: sensor.owmh_home_day1snow

  - platform: homeassistant
    id: two_days_ago_snow
    entity_id: sensor.owmh_home_day2snow

  - platform: homeassistant
    id: three_days_ago_snow
    entity_id: sensor.owmh_home_day3snow

  # New sensors for 5-day snow totals:
  - platform: homeassistant
    id: day0_snow
    entity_id: sensor.owmh_home_day0snow

  - platform: homeassistant
    id: day4_snow
    entity_id: sensor.owmh_home_day4snow

  # For the CHANCE box – chance of rain in the next hour
  - platform: homeassistant
    id: chance_rain_1hr
    entity_id: sensor.owmh_home_forecast0pop

# Text sensor for forecast day name
text_sensor:
  - platform: homeassistant
    id: forecast_day_name
    entity_id: sensor.forecast_day_name

light:
  - platform: monochromatic
    output: tft_backlight
    name: "TFT Backlight"
    id: backlight

output:
  - platform: ledc
    pin: 21
    id: tft_backlight
