esphome:
  name: tft-weather
  friendly_name: Weather TFT Display

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Time sync from Home Assistant
time:
  - platform: homeassistant
    id: esptime
    timezone: America/New_York

logger:
  level: INFO

api:
  encryption:
    key: !secret ha_api

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "garagetext"
    password: !secret fallback_password

captive_portal:

# SPI setup for TFT display
spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19

touchscreen:
  - platform: xpt2046
    id: xpt2046_touchscreen
    cs_pin: 17
    interrupt_pin: 16
    display: tft_display
    calibration:
      x_min: 280
      x_max: 3860
      y_min: 340
      y_max: 3860

# Define colors for display
color:
  - id: retro_red
    hex: FF1744
  - id: retro_orange
    hex: FF9100
  - id: retro_yellow
    hex: FFD600
  - id: retro_green
    hex: 00E676
  - id: retro_blue
    hex: 00B0FF
  - id: retro_cyan
    hex: 00FFFF
  - id: retro_teal
    hex: 00BFA5

# Define fonts
font:
  - file: "Roboto-Regular.ttf"
    id: roboto_small
    size: 24
  - file: "Roboto-Regular.ttf"
    id: roboto_medium
    size: 30
  - file: "Roboto-Regular.ttf"
    id: roboto_large
    size: 36

display:
  - platform: ili9xxx
    model: ILI9341
    cs_pin: 26
    dc_pin: GPIO5
    reset_pin: 22
    rotation: 90
    id: tft_display
    invert_colors: false
    pages:
      # Page 1: Today's Weather
      - id: weather_today
        lambda: !lambda |-
          it.fill(Color::BLACK);
          it.print(10, 20, id(roboto_large), id(retro_blue), "WEATHER");
          it.print(10, 60, id(roboto_medium), id(retro_yellow), "TODAY");
          it.printf(10, 100, id(roboto_medium), id(retro_red), "High: %.1f째F", id(today_high).state);
          it.printf(10, 140, id(roboto_medium), id(retro_blue), "Low: %.1f째F", id(tonight_low).state);

      # Page 2: Tomorrow's Weather
      - id: weather_tomorrow
        lambda: !lambda |-
          it.fill(Color::BLACK);
          it.print(10, 20, id(roboto_large), id(retro_blue), "WEATHER");
          it.print(10, 60, id(roboto_medium), id(retro_yellow), "TOMORROW");
          it.printf(10, 100, id(roboto_medium), id(retro_red), "High: %.1f째F", id(tomorrow_high).state);
          it.printf(10, 140, id(roboto_medium), id(retro_blue), "Low: %.1f째F", id(tomorrow_low).state);

      # Page 3: Today's Rain (NEW)
      - id: today_rain
        lambda: !lambda |-
          it.fill(Color::BLACK);
          it.print(10, 20, id(roboto_large), id(retro_blue), "TODAY'S RAIN");

          float rain_now = id(rain_today).has_state() ? id(rain_today).state : -1;
          float rain_expected = id(rain_forecast).has_state() ? id(rain_forecast).state : -1;

          if (rain_now >= 0) {
            it.printf(10, 60, id(roboto_medium), id(retro_yellow), "So Far: %.2f in", rain_now);
          } else {
            it.print(10, 60, id(roboto_medium), id(retro_yellow), "So Far: No Data");
          }

          if (rain_expected >= 0) {
            it.printf(10, 100, id(roboto_medium), id(retro_yellow), "Expected: %.2f in", rain_expected);
          } else {
            it.print(10, 100, id(roboto_medium), id(retro_yellow), "Expected: No Data");
          }

      # Page 4: Recent Rain
      - id: recent_rain
        lambda: !lambda |-
          it.fill(Color::BLACK);
          it.print(10, 20, id(roboto_large), id(retro_blue), "RECENT RAIN");

          float rain1 = id(rain_yesterday).has_state() ? id(rain_yesterday).state : 0.00;
          float rain2 = id(rain_2_days_ago).has_state() ? id(rain_2_days_ago).state : 0.00;
          float rain3 = id(rain_3_days_ago).has_state() ? id(rain_3_days_ago).state : 0.00;
          float total_rain = rain1 + rain2 + rain3;

          it.printf(10, 60, id(roboto_medium), id(retro_yellow), "Yesterday: %.2f in", rain1);
          it.printf(10, 100, id(roboto_medium), id(retro_yellow), "2 Days Ago: %.2f in", rain2);
          it.printf(10, 140, id(roboto_medium), id(retro_yellow), "3 Days Ago: %.2f in", rain3);
          it.printf(10, 180, id(roboto_medium), id(retro_red), "Total: %.2f in", total_rain);

      # Page 5: Future Rain
      - id: future_rain
        lambda: !lambda |-
          it.fill(Color::BLACK);
          it.print(10, 20, id(roboto_large), id(retro_blue), "FUTURE RAIN");

          float rain_tomorrow = id(future_rain_1).has_state() ? id(future_rain_1).state : -1;
          float rain_day_after = id(future_rain_2).has_state() ? id(future_rain_2).state : -1;

          if (rain_tomorrow >= 0) {
            it.printf(10, 60, id(roboto_medium), id(retro_yellow), "Tomorrow: %.2f in", rain_tomorrow);
          } else {
            it.print(10, 60, id(roboto_medium), id(retro_yellow), "Tomorrow: No Data");
          }

          if (rain_day_after >= 0) {
            it.printf(10, 100, id(roboto_medium), id(retro_yellow), "Day After: %.2f in", rain_day_after);
          } else {
            it.print(10, 100, id(roboto_medium), id(retro_yellow), "Day After: No Data");
          }

light:
  - platform: monochromatic
    output: tft_backlight
    name: "TFT Backlight"
    id: backlight

output:
  - platform: ledc
    pin: 21
    id: tft_backlight

sensor:
  - platform: homeassistant
    id: today_high
    entity_id: sensor.today_s_high_temperature

  - platform: homeassistant
    id: tonight_low
    entity_id: sensor.tonight_s_low_temperature

  - platform: homeassistant
    id: tomorrow_high
    entity_id: sensor.tomorrow_s_high_temperature

  - platform: homeassistant
    id: tomorrow_low
    entity_id: sensor.tomorrow_s_low_temperature
  
  - platform: homeassistant
    id: rain_today
    entity_id: sensor.owmh_home_day0rain
  
  - platform: homeassistant
    id: rain_forecast
    entity_id: sensor.owmh_home_forecast0rain

  - platform: homeassistant
    id: rain_yesterday
    entity_id: sensor.owmh_home_day1rain

  - platform: homeassistant
    id: rain_2_days_ago
    entity_id: sensor.owmh_home_day2rain

  - platform: homeassistant
    id: rain_3_days_ago
    entity_id: sensor.owmh_home_day3rain

  - platform: homeassistant
    id: future_rain_1
    entity_id: sensor.owmh_home_forecast1rain

  - platform: homeassistant
    id: future_rain_2
    entity_id: sensor.owmh_home_forecast2rain

interval:
  - interval: 5s
    then:
      - display.page.show_next: tft_display
